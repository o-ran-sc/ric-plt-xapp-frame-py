# coding: utf-8

"""
    RIC subscription

    This is the initial REST API for RIC subscription  # noqa: E501

    OpenAPI spec version: 0.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ricxappframe.subsclient.configuration import Configuration


class ConfigMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'xapp_name': 'str',
        'config_type': 'str'
    }

    attribute_map = {
        'xapp_name': 'xappName',
        'config_type': 'configType'
    }

    def __init__(self, xapp_name=None, config_type=None, _configuration=None):  # noqa: E501
        """ConfigMetadata - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._xapp_name = None
        self._config_type = None
        self.discriminator = None

        self.xapp_name = xapp_name
        self.config_type = config_type

    @property
    def xapp_name(self):
        """Gets the xapp_name of this ConfigMetadata.  # noqa: E501

        Name of the xApp  # noqa: E501

        :return: The xapp_name of this ConfigMetadata.  # noqa: E501
        :rtype: str
        """
        return self._xapp_name

    @xapp_name.setter
    def xapp_name(self, xapp_name):
        """Sets the xapp_name of this ConfigMetadata.

        Name of the xApp  # noqa: E501

        :param xapp_name: The xapp_name of this ConfigMetadata.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and xapp_name is None:
            raise ValueError("Invalid value for `xapp_name`, must not be `None`")  # noqa: E501

        self._xapp_name = xapp_name

    @property
    def config_type(self):
        """Gets the config_type of this ConfigMetadata.  # noqa: E501

        The type of the content  # noqa: E501

        :return: The config_type of this ConfigMetadata.  # noqa: E501
        :rtype: str
        """
        return self._config_type

    @config_type.setter
    def config_type(self, config_type):
        """Sets the config_type of this ConfigMetadata.

        The type of the content  # noqa: E501

        :param config_type: The config_type of this ConfigMetadata.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and config_type is None:
            raise ValueError("Invalid value for `config_type`, must not be `None`")  # noqa: E501
        allowed_values = ["json", "xml", "other"]  # noqa: E501
        if (self._configuration.client_side_validation and
                config_type not in allowed_values):
            raise ValueError(
                "Invalid value for `config_type` ({0}), must be one of {1}"  # noqa: E501
                .format(config_type, allowed_values)
            )

        self._config_type = config_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigMetadata):
            return True

        return self.to_dict() != other.to_dict()
