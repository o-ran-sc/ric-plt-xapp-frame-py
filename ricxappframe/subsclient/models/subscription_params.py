# coding: utf-8

"""
    RIC subscription

    This is the initial REST API for RIC subscription  # noqa: E501

    OpenAPI spec version: 0.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ricxappframe.subsclient.configuration import Configuration


class SubscriptionParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscription_id': 'str',
        'client_endpoint': 'SubscriptionParamsClientEndpoint',
        'meid': 'str',
        'ran_function_id': 'int',
        'e2_subscription_directives': 'SubscriptionParamsE2SubscriptionDirectives',
        'subscription_details': 'SubscriptionDetailsList'
    }

    attribute_map = {
        'subscription_id': 'SubscriptionId',
        'client_endpoint': 'ClientEndpoint',
        'meid': 'Meid',
        'ran_function_id': 'RANFunctionID',
        'e2_subscription_directives': 'E2SubscriptionDirectives',
        'subscription_details': 'SubscriptionDetails'
    }

    def __init__(self, subscription_id=None, client_endpoint=None, meid=None, ran_function_id=None, e2_subscription_directives=None, subscription_details=None, _configuration=None):  # noqa: E501
        """SubscriptionParams - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._subscription_id = None
        self._client_endpoint = None
        self._meid = None
        self._ran_function_id = None
        self._e2_subscription_directives = None
        self._subscription_details = None
        self.discriminator = None

        if subscription_id is not None:
            self.subscription_id = subscription_id
        self.client_endpoint = client_endpoint
        self.meid = meid
        self.ran_function_id = ran_function_id
        if e2_subscription_directives is not None:
            self.e2_subscription_directives = e2_subscription_directives
        self.subscription_details = subscription_details

    @property
    def subscription_id(self):
        """Gets the subscription_id of this SubscriptionParams.  # noqa: E501

        Optional subscription ID (Submgr allocates if not given)  # noqa: E501

        :return: The subscription_id of this SubscriptionParams.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this SubscriptionParams.

        Optional subscription ID (Submgr allocates if not given)  # noqa: E501

        :param subscription_id: The subscription_id of this SubscriptionParams.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def client_endpoint(self):
        """Gets the client_endpoint of this SubscriptionParams.  # noqa: E501


        :return: The client_endpoint of this SubscriptionParams.  # noqa: E501
        :rtype: SubscriptionParamsClientEndpoint
        """
        return self._client_endpoint

    @client_endpoint.setter
    def client_endpoint(self, client_endpoint):
        """Sets the client_endpoint of this SubscriptionParams.


        :param client_endpoint: The client_endpoint of this SubscriptionParams.  # noqa: E501
        :type: SubscriptionParamsClientEndpoint
        """
        if self._configuration.client_side_validation and client_endpoint is None:
            raise ValueError("Invalid value for `client_endpoint`, must not be `None`")  # noqa: E501

        self._client_endpoint = client_endpoint

    @property
    def meid(self):
        """Gets the meid of this SubscriptionParams.  # noqa: E501


        :return: The meid of this SubscriptionParams.  # noqa: E501
        :rtype: str
        """
        return self._meid

    @meid.setter
    def meid(self, meid):
        """Sets the meid of this SubscriptionParams.


        :param meid: The meid of this SubscriptionParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and meid is None:
            raise ValueError("Invalid value for `meid`, must not be `None`")  # noqa: E501

        self._meid = meid

    @property
    def ran_function_id(self):
        """Gets the ran_function_id of this SubscriptionParams.  # noqa: E501


        :return: The ran_function_id of this SubscriptionParams.  # noqa: E501
        :rtype: int
        """
        return self._ran_function_id

    @ran_function_id.setter
    def ran_function_id(self, ran_function_id):
        """Sets the ran_function_id of this SubscriptionParams.


        :param ran_function_id: The ran_function_id of this SubscriptionParams.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and ran_function_id is None:
            raise ValueError("Invalid value for `ran_function_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ran_function_id is not None and ran_function_id > 4095):  # noqa: E501
            raise ValueError("Invalid value for `ran_function_id`, must be a value less than or equal to `4095`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ran_function_id is not None and ran_function_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `ran_function_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ran_function_id = ran_function_id

    @property
    def e2_subscription_directives(self):
        """Gets the e2_subscription_directives of this SubscriptionParams.  # noqa: E501


        :return: The e2_subscription_directives of this SubscriptionParams.  # noqa: E501
        :rtype: SubscriptionParamsE2SubscriptionDirectives
        """
        return self._e2_subscription_directives

    @e2_subscription_directives.setter
    def e2_subscription_directives(self, e2_subscription_directives):
        """Sets the e2_subscription_directives of this SubscriptionParams.


        :param e2_subscription_directives: The e2_subscription_directives of this SubscriptionParams.  # noqa: E501
        :type: SubscriptionParamsE2SubscriptionDirectives
        """

        self._e2_subscription_directives = e2_subscription_directives

    @property
    def subscription_details(self):
        """Gets the subscription_details of this SubscriptionParams.  # noqa: E501


        :return: The subscription_details of this SubscriptionParams.  # noqa: E501
        :rtype: SubscriptionDetailsList
        """
        return self._subscription_details

    @subscription_details.setter
    def subscription_details(self, subscription_details):
        """Sets the subscription_details of this SubscriptionParams.


        :param subscription_details: The subscription_details of this SubscriptionParams.  # noqa: E501
        :type: SubscriptionDetailsList
        """
        if self._configuration.client_side_validation and subscription_details is None:
            raise ValueError("Invalid value for `subscription_details`, must not be `None`")  # noqa: E501

        self._subscription_details = subscription_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscriptionParams):
            return True

        return self.to_dict() != other.to_dict()
