# coding: utf-8

"""
    RIC subscription

    This is the initial REST API for RIC subscription  # noqa: E501

    OpenAPI spec version: 0.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ricxappframe.subsclient.configuration import Configuration


class SubscriptionParamsClientEndpoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host': 'str',
        'http_port': 'int',
        'rmr_port': 'int'
    }

    attribute_map = {
        'host': 'Host',
        'http_port': 'HTTPPort',
        'rmr_port': 'RMRPort'
    }

    def __init__(self, host=None, http_port=None, rmr_port=None, _configuration=None):  # noqa: E501
        """SubscriptionParamsClientEndpoint - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._host = None
        self._http_port = None
        self._rmr_port = None
        self.discriminator = None

        if host is not None:
            self.host = host
        if http_port is not None:
            self.http_port = http_port
        if rmr_port is not None:
            self.rmr_port = rmr_port

    @property
    def host(self):
        """Gets the host of this SubscriptionParamsClientEndpoint.  # noqa: E501

        xApp service address name like 'service-ricxapp-xappname-http.ricxapp'  # noqa: E501

        :return: The host of this SubscriptionParamsClientEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this SubscriptionParamsClientEndpoint.

        xApp service address name like 'service-ricxapp-xappname-http.ricxapp'  # noqa: E501

        :param host: The host of this SubscriptionParamsClientEndpoint.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def http_port(self):
        """Gets the http_port of this SubscriptionParamsClientEndpoint.  # noqa: E501

        xApp HTTP service address port  # noqa: E501

        :return: The http_port of this SubscriptionParamsClientEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._http_port

    @http_port.setter
    def http_port(self, http_port):
        """Sets the http_port of this SubscriptionParamsClientEndpoint.

        xApp HTTP service address port  # noqa: E501

        :param http_port: The http_port of this SubscriptionParamsClientEndpoint.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                http_port is not None and http_port > 65535):  # noqa: E501
            raise ValueError("Invalid value for `http_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                http_port is not None and http_port < 0):  # noqa: E501
            raise ValueError("Invalid value for `http_port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._http_port = http_port

    @property
    def rmr_port(self):
        """Gets the rmr_port of this SubscriptionParamsClientEndpoint.  # noqa: E501

        xApp RMR service address port  # noqa: E501

        :return: The rmr_port of this SubscriptionParamsClientEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._rmr_port

    @rmr_port.setter
    def rmr_port(self, rmr_port):
        """Sets the rmr_port of this SubscriptionParamsClientEndpoint.

        xApp RMR service address port  # noqa: E501

        :param rmr_port: The rmr_port of this SubscriptionParamsClientEndpoint.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                rmr_port is not None and rmr_port > 65535):  # noqa: E501
            raise ValueError("Invalid value for `rmr_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                rmr_port is not None and rmr_port < 0):  # noqa: E501
            raise ValueError("Invalid value for `rmr_port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._rmr_port = rmr_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionParamsClientEndpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionParamsClientEndpoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscriptionParamsClientEndpoint):
            return True

        return self.to_dict() != other.to_dict()
