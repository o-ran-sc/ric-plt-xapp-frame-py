# coding: utf-8

"""
    RIC subscription

    This is the initial REST API for RIC subscription  # noqa: E501

    OpenAPI spec version: 0.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ricxappframe.subsclient.configuration import Configuration


class ActionToBeSetup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_id': 'int',
        'action_type': 'str',
        'action_definition': 'ActionDefinition',
        'subsequent_action': 'SubsequentAction'
    }

    attribute_map = {
        'action_id': 'ActionID',
        'action_type': 'ActionType',
        'action_definition': 'ActionDefinition',
        'subsequent_action': 'SubsequentAction'
    }

    def __init__(self, action_id=None, action_type=None, action_definition=None, subsequent_action=None, _configuration=None):  # noqa: E501
        """ActionToBeSetup - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._action_id = None
        self._action_type = None
        self._action_definition = None
        self._subsequent_action = None
        self.discriminator = None

        self.action_id = action_id
        self.action_type = action_type
        if action_definition is not None:
            self.action_definition = action_definition
        if subsequent_action is not None:
            self.subsequent_action = subsequent_action

    @property
    def action_id(self):
        """Gets the action_id of this ActionToBeSetup.  # noqa: E501


        :return: The action_id of this ActionToBeSetup.  # noqa: E501
        :rtype: int
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this ActionToBeSetup.


        :param action_id: The action_id of this ActionToBeSetup.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and action_id is None:
            raise ValueError("Invalid value for `action_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                action_id is not None and action_id > 255):  # noqa: E501
            raise ValueError("Invalid value for `action_id`, must be a value less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                action_id is not None and action_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `action_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._action_id = action_id

    @property
    def action_type(self):
        """Gets the action_type of this ActionToBeSetup.  # noqa: E501


        :return: The action_type of this ActionToBeSetup.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this ActionToBeSetup.


        :param action_type: The action_type of this ActionToBeSetup.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")  # noqa: E501
        allowed_values = ["insert", "policy", "report"]  # noqa: E501
        if (self._configuration.client_side_validation and
                action_type not in allowed_values):
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"  # noqa: E501
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def action_definition(self):
        """Gets the action_definition of this ActionToBeSetup.  # noqa: E501


        :return: The action_definition of this ActionToBeSetup.  # noqa: E501
        :rtype: ActionDefinition
        """
        return self._action_definition

    @action_definition.setter
    def action_definition(self, action_definition):
        """Sets the action_definition of this ActionToBeSetup.


        :param action_definition: The action_definition of this ActionToBeSetup.  # noqa: E501
        :type: ActionDefinition
        """

        self._action_definition = action_definition

    @property
    def subsequent_action(self):
        """Gets the subsequent_action of this ActionToBeSetup.  # noqa: E501


        :return: The subsequent_action of this ActionToBeSetup.  # noqa: E501
        :rtype: SubsequentAction
        """
        return self._subsequent_action

    @subsequent_action.setter
    def subsequent_action(self, subsequent_action):
        """Sets the subsequent_action of this ActionToBeSetup.


        :param subsequent_action: The subsequent_action of this ActionToBeSetup.  # noqa: E501
        :type: SubsequentAction
        """

        self._subsequent_action = subsequent_action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionToBeSetup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionToBeSetup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActionToBeSetup):
            return True

        return self.to_dict() != other.to_dict()
