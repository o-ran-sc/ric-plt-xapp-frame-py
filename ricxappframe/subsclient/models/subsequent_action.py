# coding: utf-8

"""
    RIC subscription

    This is the initial REST API for RIC subscription  # noqa: E501

    OpenAPI spec version: 0.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ricxappframe.subsclient.configuration import Configuration


class SubsequentAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subsequent_action_type': 'str',
        'time_to_wait': 'str'
    }

    attribute_map = {
        'subsequent_action_type': 'SubsequentActionType',
        'time_to_wait': 'TimeToWait'
    }

    def __init__(self, subsequent_action_type=None, time_to_wait=None, _configuration=None):  # noqa: E501
        """SubsequentAction - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._subsequent_action_type = None
        self._time_to_wait = None
        self.discriminator = None

        self.subsequent_action_type = subsequent_action_type
        self.time_to_wait = time_to_wait

    @property
    def subsequent_action_type(self):
        """Gets the subsequent_action_type of this SubsequentAction.  # noqa: E501


        :return: The subsequent_action_type of this SubsequentAction.  # noqa: E501
        :rtype: str
        """
        return self._subsequent_action_type

    @subsequent_action_type.setter
    def subsequent_action_type(self, subsequent_action_type):
        """Sets the subsequent_action_type of this SubsequentAction.


        :param subsequent_action_type: The subsequent_action_type of this SubsequentAction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and subsequent_action_type is None:
            raise ValueError("Invalid value for `subsequent_action_type`, must not be `None`")  # noqa: E501
        allowed_values = ["continue", "wait"]  # noqa: E501
        if (self._configuration.client_side_validation and
                subsequent_action_type not in allowed_values):
            raise ValueError(
                "Invalid value for `subsequent_action_type` ({0}), must be one of {1}"  # noqa: E501
                .format(subsequent_action_type, allowed_values)
            )

        self._subsequent_action_type = subsequent_action_type

    @property
    def time_to_wait(self):
        """Gets the time_to_wait of this SubsequentAction.  # noqa: E501


        :return: The time_to_wait of this SubsequentAction.  # noqa: E501
        :rtype: str
        """
        return self._time_to_wait

    @time_to_wait.setter
    def time_to_wait(self, time_to_wait):
        """Sets the time_to_wait of this SubsequentAction.


        :param time_to_wait: The time_to_wait of this SubsequentAction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and time_to_wait is None:
            raise ValueError("Invalid value for `time_to_wait`, must not be `None`")  # noqa: E501
        allowed_values = ["zero", "w1ms", "w2ms", "w5ms", "w10ms", "w20ms", "w30ms", "w40ms", "w50ms", "w100ms", "w200ms", "w500ms", "w1s", "w2s", "w5s", "w10s", "w20s", "w60s"]  # noqa: E501
        if (self._configuration.client_side_validation and
                time_to_wait not in allowed_values):
            raise ValueError(
                "Invalid value for `time_to_wait` ({0}), must be one of {1}"  # noqa: E501
                .format(time_to_wait, allowed_values)
            )

        self._time_to_wait = time_to_wait

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubsequentAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubsequentAction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubsequentAction):
            return True

        return self.to_dict() != other.to_dict()
